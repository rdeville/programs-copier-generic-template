#!/usr/bin/env bash

COMMIT=(
  "🔨 <TPL:ACTION> pre-commit configuration from copier template,.pre-commit-config.yaml"
  "📄 <TPL:ACTION> LICENSES from copier template,LICENSE*"
  "📝 <TPL:ACTION> README from copier template,README.md"
  "🙈 <TPL:ACTION> gitignore from copier template,.gitignore"
  "🔧 <TPL:ACTION> commitlint config from copier template,.commitlintrc.ts"
  "🔨 <TPL:ACTION> yaml related configuration from copier template,.yamllint .yamlfmt"
  "🔨 <TPL:ACTION> editorconfig configuration from copier template,.editorconfig"
  "🔧 <TPL:ACTION> copier sync configuration,.copier.yaml"
)

COMMIT_FORCE=(
  "🔨 <TPL:ACTION> devbox config from copier template,devbox.* .devbox/init_hook/*.sh .devbox/flakes/"
  "🔨 <TPL:ACTION> .envrc from copier template,.envrc"
)

parse_arg() {
  if [[ $# -ne 1 ]]; then
    echo "ERROR - One argument must be provided to specify the copier action"
    echo "ERROR - Valid values are: 'copy', 'update'"
    exit 1
  elif ! [[ "$1" =~ (copy|update) ]]; then
    echo "ERROR - Passed argument, ${1} is not supported"
    echo "ERROR - Valid values are: 'copy', 'update'"
    exit 1
  fi

  action="$1"
}

msg_fmt() {
  msg="${commit%,*}"
  if [[ "${action}" == "copy" ]]; then
    msg="${msg/"<TPL:ACTION>"/"Add"}"
  elif [[ "${action}" == "update" ]]; then
    msg="${msg/"<TPL:ACTION>"/"Update"}"
  fi
}

commit() {
  local commit="git commit -m \"${msg}\""
  local allfiles=()
  local opts=()

  if [[ "$1" == "force" ]]; then
    opts+=("-f")
  fi

  # shellcheck disable=2086
  for file in ${files}; do
    if git add "${opts[@]}" ${file} &>/dev/null; then
      allfiles+=("${file}")
    fi
  done

  echo "============================"
  echo $PWD
  echo "============================"
  if ! git diff --quiet; then
    # shellcheck disable=2086
    echo "${msg}"
    # Retry once in case pre-commit apply formatter
    if ! git commit "${allfiles[@]}" -m "${msg}"; then
      git commit "${allfiles[@]}" -m "${msg}"
    fi
  fi
}

process_commit() {
  for commit in "${COMMIT_FORCE[@]}"; do
    files="${commit#*,}"

    msg_fmt
    commit "force"
  done

  for commit in "${COMMIT[@]}"; do
    files="${commit#*,}"

    msg_fmt
    commit
  done
}

main() {
  local action

  parse_arg "$@"
  process_commit
}

main "$@"
